#include <iostream>
using namespace std;
// ==============================================================================================================
    //      Класс для создания уравнения плоскости по 3-м точкам
    //===============================================================================================================
class Plane {
private:
    int xA, yA, zA;
    int xB, yB, zB;
    int xC, yC, zC;
protected:
    int a, b, c, d;
    // ==============================================================================================================
    //       Получаем ур - е плоскости
    //===============================================================================================================
    void Get_Eqution()
    {
        //       Общее Уравнение плоскости:   ax+by+cz+d=0
        /*   | x - xA    y - yA     z - zA |            | x - xA    y - yA     z - zA |
             | xB - xA	 yB - yA   zB - zA |  = 0  ->   |   i4	      i5          i6  |
             | xC - xA 	 yC - yA   zC - zA |            |   i7 	      i8           i9 |
        */
        int i4 = (xB - xA); int i5 = (yB - yA); int i6 = (zB - zA);
        int i7 = (xC - xA); int i8 = (yC - yA); int i9 = (zC - zA);

        //    +(x - xA)*(i5*i9-i8*i6)   1 минор

          //  -(y - yA)*(i4*i9-i7*i6)    2 минор

        //    +(z - zA)*(i4*i8-i7*i5)    3 минор

        a = (i5 * i9 - i8 * i6);
        b = -(i4 * i9 - i7 * i6);
        c = (i4 * i8 - i7 * i5);
        d = -xA * a - yA * b - zA * c;
    }
   
public:
    Plane(int xa=0, int ya=0, int za=0, int xb=0, int yb=0, int zb=0, int xc=0, int yc=0, int zc=0)
        :xA(xa), yA(ya),zA(za), xB(xb), yB(yb), zB(zb), xC(xc), yC(yc),zC(zc) 
    {
        Get_Eqution();
    }

    //==============================================================================================================
    //                      Вывод ур-я плоскости
     //==============================================================================================================
    void Print_Equation() 
    {
        cout << "Equation of plane:\n" << "(" << a << "x) + (" << b << "y) + (" << c << "z) +(" << d << ") = 0" << endl;
    }
};
// ==============================================================================================================
    //      Класс для создания уравнения прямой по 2-м точкам отрезка
    //===============================================================================================================
class Line {
protected:
    int xA1, yA1, zA1;
    int xB1, yB1, zB1;
    int l,m,n;
    // ==============================================================================================================
    //       Получаем ур - е прямой
    //===============================================================================================================
    void Get_Eqution()
    {
        //=============== Параметрическое уравнение прямой =======================
    /*   x = l*t + xA1
         y = m*t + yA1
         z = n*t + zA1  
       где  (l,m,n)= AB = {xB1 - xA1; yB1 - yA1; zB1 - zA1};   
    */
        l = (xB1 - xA1);
        m = (yB1 - yA1);
        n = (zB1 - zA1);
    }
public:
    Line(int xa = 0, int ya = 0, int za = 0, int xb = 0, int yb = 0, int zb = 0)
        :xA1(xa), yA1(ya), zA1(za), xB1(xb), yB1(yb), zB1(zb)
    {       
        Get_Eqution();
    }

    //==============================================================================================================
     //                      Вывод ур-я прямой
      //==============================================================================================================
    void Print_Equation()
    {
        cout << "Equation of line:\n" <<
            "x = " << l << " * t + " << xA1 << endl <<
            "y = " << m << " * t + " << yA1 << endl <<
            "z = " << n << " * t + " << zA1 << endl;
    }

};
// ==============================================================================================================
    //      Класс для нахождения точки пересечения
    //===============================================================================================================
class Intersection_Point:public Plane,public Line
{
   /* ===============================================================================================================
   Подставим х, у, z из параметрического уравнения прямой в уравнение плоскости
   ==================================================================================================================
   a* (l* t + xA1) + b * (m * t + yA1) + c * (n * t + zA1) + d = 0
        a * l * t + a * xA1 + b * m * t + b * yA1 + c * n * t + c * zA1 + d = 0
        a * l * t + b * m * t + c * n * t = -a * xA1 - b * yA1 - c * zA1 - d
        t = (-a * xA1 - b * yA1 - c * zA1 - d) / (a * l + b * m + c * n)
*/
    double t{}, x{}, y{}, z{};
public:
    Intersection_Point(int xa = 0, int ya = 0, int za = 0,
        int xb = 0, int yb = 0, int zb = 0,
        int xc = 0, int yc = 0, int zc = 0,
        int xa1 = 0, int ya1 = 0, int za1 = 0,
        int xb1 = 0, int yb1 = 0, int zb1 = 0) :

        Plane(xa, ya, za, xb, yb, zb, xc, yc, zc),
        Line(xa1, ya1, za1, xb1, yb1, zb1)
    {}
//===========================================================================================================
//    Получаем точку пересечения
//===========================================================================================================
    void Get_and_print_intersection_point()
    {
        double res = (a * l + b * m + c * n);
        if ((a==0)&&(b==0)&& (c==0))
            cout << " Incorrect plane points" << endl;
        else if ((xA1 == xB1) && (yA1 == yB1) && (zA1 == zB1))
            cout << "Equal points for line segment" << endl;
        else if (res == 0)
            cout << "The line is parallel to the plane" << endl;
        else
        {
            t = static_cast<double>((-a * xA1 - b * yA1 - c * zA1 - d) / res);
            //===============================Далее находим х, у, z , подставляя t в параметрическое уравнение прямой
            x = static_cast<double>(l * t + xA1);
            y = static_cast<double>(m * t + yA1);
            z = static_cast<double>(n * t + zA1);
            Plane::Print_Equation();
            Line::Print_Equation();
            cout << "Intersection point: x=  " << x << "; y= " << y << "; z= " << z << "." << endl;
        }
    }

};

int main()
{
  /* 
  
  cout << "Enter rectangle points: A(x,y,z); B(x,y,z); C(x,y,z); Enter line points: A(x,y,z); B(x,y,z) " << endl;
    int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
    cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 >> a7 >> a8 >> a9>>a10>>a11>>a12>>a13>>a14>>a15;
   Intersection_Point A1(a1, a2, a3, a4, a5, a6, a7, a8, a9,a10,a11,a12,a13,a14,a15);

   */
   Intersection_Point A1(0,2,2,0,17,2,0,3,1,0,2,2,0,17,2);
   A1.Get_and_print_intersection_point();
   return 0;
}

